version: '3.9'

services:
  api:
    container_name: api
    build:
      context: ./money_transfer
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    environment:
      ENV: docker
      DB_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    command: >
      bash -c "uvicorn src:app --host 0.0.0.0 --port=8000 --reload && \
      echo 'App started successfully.'"
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthcheck"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - app_network

  frontend:
    container_name: frontend
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    env_file:
      - ./dashboard/.env
    depends_on:
      - api
    networks:
      - app_network

  db:
    image: postgres:15
    container_name: db
    restart: on-failure
    env_file:
      - ./money_transfer/.env
    volumes:
      - money_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - app_network
  
  celery_worker:
    build:
      context: ./money_transfer
      dockerfile: Dockerfile
    container_name: celery_worker
    command: >
      bash -c "cd /app && celery -A src.celery:celery_app worker --loglevel=info"
    env_file:
      - ./money_transfer/.env
    depends_on:
      - redis
      - api
    networks:
      - app_network
  flower:
    build:
      context: ./money_transfer
      dockerfile: Dockerfile
    container_name: flower
    command: celery -A src.celery:celery_app flower --port=5555 --basic_auth=${FLOWER_BASIC_AUTH}
    ports:
      - "5555:5555"
    env_file: 
      - .env
    environment:
      - FLOWER_BASIC_AUTH=${FLOWER_BASIC_AUTH}
    depends_on:
      - redis
      - api
    networks:
      - app_network

  
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app_network

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"  # UI Web de RabbitMQ
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - api
      - frontend
    networks:
      - app_network

volumes:
  money_data:

networks:
  app_network:
    driver: bridge
